## choose the port and host of each "server"
## The first server for a host:port will be the default for this host:port

NGINX : Listen

	syntax:	
    	listen <address>[:<port>];
    	listen <port>;
    
	default:
		listen *:80 | *:8000;

	Context:
		server
	
  	exemple:  
    	listen 127.0.0.1:8000;
    	listen 127.0.0.1;
    	listen 8000;
    	listen *:8000;
   		listen localhost:8000;

WEBSERV : listen

	syntax :
		listen <address> [<port>]
		listen <port>;
	
	default:
		listen 0.0.0.0 80

	Context:
		server

	exemple:
		listen 8080
		listen 127.0.0.1 80
		listen 127.0.0.1

## setup the server_nameS or not

NGINX : server_name
	
	Syntax:
		server_name <name> ...;
	
	Default: 	
		server_name "";

	Context:
		server
	
	exemple :
    	server_name example.com www.example.com;
		server_name example.com *.example.com www.example.*;
		server_name .example.com;

WEBSERV : server_name
	
	Syntax:
		server_name <name> ...
	
	Default: 	
		server_name ""

	Context:
		server
	
	exemple :
    	server_name example.com www.example.com

## setup default error pages

NGINX : error_page

		Syntax: 	
			error_page <code> ... [=[<response>]] <uri>;
		
		Default:
			—     
		
		Context:
			server, location

		example:
			error_page 404             /404.html;
			error_page 500 502 503 504 /50x.html;

WEBSERV : error_page

	Syntax: 	
		error_page <code> ... <uri>
	
	Default:
		error_page 404	/404.html
		error_page 413	/413.html
		error_page 504	/504.html
		...

	Context:
		server, location

	example:
		error_page 403             /403.html
		error_page 500 502 503 504 /50x.html

## limit client body size

NGINX : client_max_body_size

		Syntax:
			client_max_body_size <size>; (size : 100, 1k, 5K, 2m, 3M)
		
		Context:
			server, location

		Default:
			client_max_body_size 1m;

		example:
			client_max_body_size 1024;

WEBSERV : client_max_body_size

		Syntax:
			client_max_body_size <size>
		
		Context:
			server, location

		Default:
			client_max_body_size 1000000

code_error : 413 Payload Too Large

## setup routes with one or multiple of the following rules/configuration (routes wont be using regexp)

NGINX : location

	Syntax:	location [ = | ~ | ~* | ^~ ] uri { ... }
					  optional_modifier
	Default:	—
	Context:	server, location
	
	optional_modifier :
		vide : prefix (comparée avec le début de l'URI)
		=	 : correspondance exacte
		~    : regex sensible a la casse
		~*	 : regex insensible a la casse
		^~	 : ne correspond pas

WEBSERV : location

	syntax:
		location <^uri> | <ext$> { 
			...
		}
	Default:
			NULL
	Context:
			server, location (1 niveau)
	example:
			location /user/ {
				...
			}
			all routes begin with "/user/"
			
			location .php {
				...
			}
			all routes finish with ".php"

			location /user {
				location .php {
					...
				}
			}
			all routes begin with "/directory" and finish with ".php"
	
- what is uri :
							
$scheme :// $host		  $uri 						     ? $query_string
http    :// localhost     /directory/youpi.bad_extension ? var1=1&var2=2

$request_uri = $uri + $query_string

Normalized uri :

- decoding the text encoded in the “%XX” form
- resolving references to relative path components “.” and “..”
- compression of two or more adjacent slashes into a single slash.

//directory/../directory//./ => /directory/

!	#	$	&	'	(	)	*	+	,	/	:	;	=	?	@	[	]
%21	%23	%24	%26	%27	%28	%29	%2A	%2B	%2C	%2F	%3A	%3B	%3D	%3F	%40	%5B	%5D

? location in location

## define a list of accepted HTTP Methods for the route

NGINX : limit_except or if

	limit_except GET { deny all; }

	if ($request_method != GET ) { return 405; }

WEBSERV : limit_except

	syntax:
		limit_except <method> ...;

	default: -

	example:
		limit_except GET;
	
	Context:
		location

method : GET POST HEAD PUT DELETE
code_error: 405 Not Allowed

## define an HTTP redirection.

NGINX : return

	syntax: 	
		return <code> [<text>];
		return <code> <URL>;
		return <URL>;

	Default: —

	Context: 
		server, location

	example:
		return 301 $scheme://$host$request_uri;

WEBSERV : return

	syntax: 	
		return [<code>] <URL>

	Default: —

	Context: server, location 

	example:
		return 301 http://localhost/directory/youpi.bla?var=1;

## define a directory or a file from where the file should be search (for example if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet is /tmp/www/pouic/toto/pouet)

NGINX : alias or root

alias:

	Syntax:	
		alias <path>;

	Default:
		—

	Context:
		location
	
	example:
		location /kapouet {
   			alias /tmp/www;
		}
 	/kapouet/pouic/toto/ => /tmp/www/pouic/toto/

root:

	Syntax:
		root <path>;
	Default:
		root html;
	Context:
		server, location

	exemple:
		location /kapouet/ {
    		root /tmp/www;
		}

 	/kapouet/pouic/toto/ => /tmp/www/pouic/toto/

- error if alias and root in location :
"alias" directive is duplicate, "root" directive was specified earlier

- alias replace root on context

WEBSERV : root
	
	Syntax:
		root <path> [alias]
	Default:
		root html;
	Context:
		server (without alias), location

	exemple:
		location /i/ {
    		root /data/w3 alias
		}
		i = /data/w3

		location /i/ {
    		root /data/w3
		}
		/data/w3/i/

## turn on or off directory listing

WEBSERV : autoindex

	syntax: autoindex on | off;

	Default: autoindex off;
	
	Context: server, location

## default file to answer if the request is a directory

WEBSERV : index
	
	syntax:
		index <file> ...;

	default:
		index index.html;

	context:
		server, location

	example:
		index index.html index.php;
		

## execute CGI based on certain file extension (for example .php)

APACHE
	AddHandler cgiphp .php
	Action cgiphp /cgi-bin/cgi-php

WEBSERV : cgi

	syntax:
		cgi <cgi-path>
	default:
		NULL
	Context:
		location
	example:
		location .php {
			cgi /cgi/php_cgi
		}

## make the route able to accept uploaded files and configure where it should be saved

WEBSERV : upload

	syntax:
		upload <path-directory>

	default: -

	Context:
		location

	example:
		upload /tmp/upload;

## A request to your server should never hang forever

client_body_timeout			60s;

Defines a timeout for reading client request body. The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body. If a client does not transmit anything within this time, the request is terminated with the 408 (Request Time-out) error.

client_header_timeout		60s;

Defines a timeout for reading client request header. If a client does not transmit the entire header within this time, the request is terminated with the 408 (Request Time-out) error.

keepalive_timeout			75s;

Sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections.

resolver_timeout			30s;

Sets a timeout for name resolution

send_timeout                60s;

Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write operations, not for the transmission of the whole response. If the client does not receive anything within this time, the connection is closed.

fastcgi_read_timeout		60s;

Defines a timeout for reading a response from the FastCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the FastCGI server does not transmit anything within this time, the connection is closed.

fastcgi_send_timeout		60s;

Sets a timeout for transmitting a request to the FastCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the FastCGI server does not receive anything within this time, the connection is closed.

lingering_timeout 5s;

this directive specifies the maximum waiting time for more client data to arrive. If data are not received during this time, the connection is closed. Otherwise, the data are read and ignored, and nginx starts waiting for more data again. The “wait-read-ignore” cycle is repeated, but no longer than specified by the lingering_time directive.

lingering_time 30s;

When lingering_close is in effect, this directive specifies the maximum time during which nginx will process (read and ignore) additional data coming from a client. After that, the connection will be closed, even if there will be more data.

## log file

access_log <file-path>;
error_log <file-path>;

## comment

## conflict route

see
http://nginx.org/en/docs/http/ngx_http_core_module.html
http://nginx.org/en/docs/http/ngx_http_rewrite_module.html
