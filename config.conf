## choose the port and host of each "server"
## The first server for a host:port will be the default for this host:port

NGINX

   Listen :

	syntax:	
    	listen <address>[:<port>];
    	listen <port>;
    
	default:
		listen *:80 | *:8000;

	Context:
		server
	
  	exemple:  
    	listen 127.0.0.1:8000;
    	listen 127.0.0.1;
    	listen 8000;
    	listen *:8000;
   		listen localhost:8000;

WEBSERV

	syntax :
		listen <address> [<port>]
		listen <port>;
	
	default:
		listen 0.0.0.0 80

	Context:
		server

	exemple:
		listen 8080
		listen 127.0.0.1 80
		listen 127.0.0.1

## setup the server_nameS or not

NGINX

server_name:
	
	Syntax:
		server_name <name> ...;
	
	Default: 	
		server_name "";

	Context:
		server
	
	exemple :
    	server_name example.com www.example.com;
		server_name example.com *.example.com www.example.*;
		server_name .example.com;

WEBSERV

server_name:
	
	Syntax:
		server_name <name> ...
	
	Default: 	
		server_name ""

	Context:
		server
	
	exemple :
    	server_name example.com www.example.com

## setup default error pages

NGINX

error_page :

		Syntax: 	
			error_page <code> ... [=[<response>]] <uri>;
		
		Default:
			—     
		
		Context:
			server, location

		example:
			error_page 404             /404.html;
			error_page 500 502 503 504 /50x.html;

WEBSERV

error_page :

	Syntax: 	
		error_page <code> ... <uri>
	
	Default:
		error_page 404	/404.html
		error_page 413	/413.html
		error_page 504	/504.html
		...

	Context:
		server, location

	example:
		error_page 403             /403.html
		error_page 500 502 503 504 /50x.html

## limit client body size

NGINX

client_max_body_size:

		Syntax:
			client_max_body_size <size>; (size : 100, 1k, 5K, 2m, 3M)
		
		Context:
			server, location

		Default:
			client_max_body_size 1m;

		example:
			client_max_body_size 1024;

WEBSERV

		Syntax:
			client_max_body_size <size>
		
		Context:
			server, location

		Default:
			client_max_body_size 1000000

code_error : 413 Payload Too Large

## setup routes with one or multiple of the following rules/configuration (routes wont be using regexp)

WEBSERV

location:

	syntax:
		location <^uri> { 
			...
		}
	Default:
			NULL
	Context:
			server
	example:
			location /user/ {
				...
			}
	
- what is uri :

$scheme :// $server_name  $uri 						     ? $query_string
http    :// localhost     /directory/youpi.bad_extension ? var1=1&var2=2

Normalized uri :

- decoding the text encoded in the “%XX” form
- resolving references to relative path components “.” and “..”
- compression of two or more adjacent slashes into a single slash.

//directory/../directory//./ => /directory/

!	#	$	&	'	(	)	*	+	,	/	:	;	=	?	@	[	]
%21	%23	%24	%26	%27	%28	%29	%2A	%2B	%2C	%2F	%3A	%3B	%3D	%3F	%40	%5B	%5D

? location in location

## define a list of accepted HTTP Methods for the route

WEBSERV
	
	syntax:
		allow_methods <method> ...;

	default:
		allow_methods GET HEAD POST PUT DELETE;

	example:
		allow_methods GET;
	
	Context:
		location

code_error: 405 Not Allowed

## define an HTTP redirection.

NGINX

return :

	syntax: 	
		return <code> [<text>];
		return <code> <URL>;
		return <URL>;

	Default: —

	Context: 
		server, location

	example:
		return 301 $scheme://$host$request_uri;

WEBSERV

return :

	syntax: 	
		return [<code>] <URL>

	Default: —

	Context: server, location 

	example:
		return 301 http://localhost/directory/youpi.bla?var=1;


## define a directory or a file from where the file should be search (for example if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet is /tmp/www/pouic/toto/pouet)

WEBSERV
	Syntax:	
		alias <path>

	Default:	—

	Context:	location
	
	example:
		location /kapouet {
   			alias /tmp/www;
		}

root :
		Syntax:
			root path;
		Default: 	
			root html;
		exemple:
			location /i/ {
    			root /data/w3;
			}

## turn on or off directory listing

WEBSERV

autoindex:

	syntax: autoindex on | off;

	Default: autoindex off;
	
	Context: server, location

## default file to answer if the request is a directory

WEBSERV

index:
	
	syntax:
		index <file> ...;

	default:
		index index.html;

	context:
		server, location

	example:
		index index.html index.php;
		

## execute CGI based on certain file extension (for example .php)

APACHE
	AddHandler cgiphp .php
	Action cgiphp /cgi-bin/cgi-php

WEBSERV
	syntax:
		cgi <cgi-path> <cgi-ext>
	default:
		NULL
	Context:
		server, location
	example:
		cgi /cgi/php_cgi .php;

## make the route able to accept uploaded files and configure where it should be saved

WEBSERV

upload

	syntax:
		upload <path-directory>

	default: -

	Context:
		location

	example:
		upload /tmp/upload;

? multipart/form-data

write test :
- delete
- session and cookies
- upload post
