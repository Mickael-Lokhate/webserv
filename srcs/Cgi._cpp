#include "Cgi.hpp"

static void _abort(void)
{
	std::cerr << "[Cgi] - child: " << strerror(errno) << std::endl;
	exit(EXIT_FAILURE);
}

Cgi::Cgi(void)
{
	if (pipe(in) == -1)
		throw std::runtime_error(std::string(strerror(errno)));
	if (pipe(out) == -1)
	{
		std::runtime_error error =
				std::runtime_error(std::string(strerror(errno)));
		close(in[0]);
		close(in[1]);
		throw error;
	}
	input = in[1];
	output = out[0];
}

pid_t Cgi::exe(void)
{
#ifdef DEBUG
	std::cout << "[Cgi] - start CGI execution" << std::endl;
#endif
	if (fork() == -1)
	{
		close(in[0]);
		close(out[1]);
		throw std::runtime_error(std::string(strerror(errno)));
	}
	else if (pid == 0)
	{
		close(in[1]);
		if (dup2(in[0], STDIN_FILENO) == -1)
			_abort();
		close(out[0]);
		if (dup2(out[1], STDOUT_FILENO) == -1)
			_abort();
		/* setup CGI environment, execve() */
	}
	close(in[0]);
	close(out[1]);
	return (pid);
}

Cgi::~Cgi(void)
{
	close(in[1]);
	close(out[0]);
}
